RaytracingAccelerationStructure _Scene;
RWTexture2D<float4> _Result;

// Uncomment this pragma for debugging the HLSL code in PIX. GPU performance will be impacted.
//#pragma enable_ray_tracing_shader_debug_symbols

#pragma max_recursion_depth 1

// URP用のインクルードファイル
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

// レイペイロード構造体
struct RayPayload
{
    float3 color;
    float hitDistance;
};

// レイの生成
[shader("raygeneration")]
void MyRaygenShader()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    uint2 dimensions = DispatchRaysDimensions().xy;
    
    // projection行列からアスペクト比とtan half fovを直接取得
    float aspect = unity_CameraProjection._m00 / unity_CameraProjection._m11; // aspect ratio
    float tanHalfFov = 1.0 / unity_CameraProjection._m11; // tan half fov
    
    // スクリーン座標を正規化デバイス座標に変換
    float2 uv = (float2(dispatchIdx) + 0.5) / float2(dimensions);
    float2 ndc = uv * 2.0 - 1.0;
    ndc.y = -ndc.y; // Unityの座標系に合わせる
    
    // unity_WorldToCameraの行ベクトルからワールド座標系でのカメラの方向を取得
    float3 right = unity_WorldToCamera[0].xyz;   // 右方向ベクトル
    float3 up = unity_WorldToCamera[1].xyz;     // 上方向ベクトル
    float3 forward = unity_WorldToCamera[2].xyz; // 前方向ベクトル
    
    // tan half fovとアスペクト比を使ってレイ方向を計算
    float3 rayDirection = normalize(
        ndc.x * tanHalfFov * aspect * right +
        ndc.y * tanHalfFov * up +
        forward
    );
    
    // レイの生成
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin = _ProjectionParams.y; // near plane
    ray.TMax = _ProjectionParams.z; // far plane
    
    // レイペイロードの初期化
    RayPayload payload;
    payload.color = float3(0.0, 0.0, 0.0);
    payload.hitDistance = -1.0;
    
    // レイトレーシングの実行
    TraceRay(_Scene, RAY_FLAG_NONE, 0xFF, 0, 0, 0, ray, payload);
    
    // 結果をレンダーターゲットに書き込み
    _Result[dispatchIdx] = float4(payload.color, 1.0);
}
